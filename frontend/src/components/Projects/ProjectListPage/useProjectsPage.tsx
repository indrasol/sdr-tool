import { useEffect, useState } from 'react';
import { useNavigate } from 'react-router-dom';
import { Project, useProjects } from '@/hooks/useProjects';
import type { ProjectStatus, ProjectPriority } from '@/components/Projects/ProjectCard';
import { useToast } from '@/hooks/use-toast';
import type { ProjectTemplateType } from '@/components/Projects/ProjectTemplateSelector';
import { useAuth } from '@/components/Auth/AuthContext';

export const useProjectsPage = () => {
  const [viewType, setViewType] = useState<'grid' | 'list'>('grid');
  const [createDialogOpen, setCreateDialogOpen] = useState(false);
  const [deleteDialogOpen, setDeleteDialogOpen] = useState(false);
  const [editDialogOpen, setEditDialogOpen] = useState(false);
  const [projectToDelete, setProjectToDelete] = useState<{id: string, name: string} | null>(null);
  const [projectToEdit, setProjectToEdit] = useState<Project | null>(null);
  const { toast } = useToast();
  const navigate = useNavigate();
  const { user } = useAuth();
  
  const {
    projects,
    allProjects,
    searchTerm,
    setSearchTerm,
    statusFilter,
    setStatusFilter,
    priorityFilter,
    setPriorityFilter,
    templateFilter,
    setTemplateFilter,
    clearFilters,
    hasActiveFilters,
    addProject,
    deleteProject,
    updateProject,
    loadSampleProjects,
    error,
    isLoading
  } = useProjects();

  // Display error toast if an error occurs from useProjects
  useEffect(() => {
    if (error) {
      toast({
        title: "Error",
        description: error,
        variant: "destructive",
      });
    }
  }, [error, toast]);

  // Handle project click with navigation based on templateType
  const handleProjectClick = (projectId: string) => {
    const project = projects.find((p) => p.id === projectId);

    if (project) {
      switch (project.templateType) {
        case 'AI Assisted':
          navigate('/model-with-ai');
          break;
        case 'Import Existing':
          navigate('/security-analysis');
          break;
        case 'Solutions Hub':
          navigate('/solutions-hub');
          break;
        default:
          toast({
            title: "Project Selected",
            description: `You clicked on project ${projectId}`,
          });
      }
    }
  };

  // Open the create project dialog
  const handleCreateProject = () => {
    setCreateDialogOpen(true);
  };

  const handleEditProject = (projectId: string) => {
    const project = projects.find(p => p.id === projectId);
    if (project) {
      setProjectToEdit(project);
      setEditDialogOpen(true);
    }
  };

  const handleUpdateProject = (projectId: string, updatedData: Partial<Project>) => {
    updateProject(projectId, updatedData);
    toast({
      title: "Project Updated",
      description: `Project has been updated successfully`,
    });
    setEditDialogOpen(false);
    setProjectToEdit(null);
  };

  const handleDeleteProject = (projectId: string) => {
    const project = projects.find(p => p.id === projectId);
    if (project) {
      setProjectToDelete({id: project.id, name: project.name});
      setDeleteDialogOpen(true);
    }
  };

  const confirmDeleteProject = () => {
    if (projectToDelete) {
      deleteProject(projectToDelete.id);
      toast({
        title: "Project Deleted",
        description: `Project "${projectToDelete.name}" has been deleted`,
      });
      setDeleteDialogOpen(false);
      setProjectToDelete(null);
    }
  };
  
  // Handle project creation with async API call and "testsdr" condition
  const handleProjectCreation = async (projectData: {
    name: string;
    description: string;
    priority: 'Low' | 'Medium' | 'High' | 'Critical';
    domain?: string;
    dueDate?: string;
    creator: string;
    templateType?: ProjectTemplateType;
    importedFile?: string;
  }) => {
    // Maintain "testsdr" condition for testing purposes
    console.log("Entered handleProjectCreation");
    if (projectData.creator === 'testsdr' && allProjects.length === 0) {
      const loaded = loadSampleProjects(projectData.creator);
      if (loaded) {
        toast({
          title: "Sample Projects Loaded",
          description: "Sample projects have been loaded for testing.",
        });
        setCreateDialogOpen(false);
        return; // Exit early if sample projects are loaded
      }
    }

    try {
      console.log("Project data", projectData);
      const tenantId = user.tenant_ids[0];
      
      // Create a new object with default values properly applied
      const defaultDueDate = new Date(Date.now() + 30 * 24 * 60 * 60 * 1000).toISOString().split('T')[0];
      
      // Add project via API (ID is generated by the backend)
      await addProject({
        name: projectData.name,
        description: projectData.description,
        tenant_id: tenantId,
        status: 'Not Started' as ProjectStatus,
        priority: projectData.priority,
        createdDate: new Date().toISOString().split('T')[0],
        dueDate: projectData.dueDate || defaultDueDate, // Use the default if not provided
        creator: projectData.creator,
        domain: projectData.domain || 'General', // Use the default if not provided
        templateType: projectData.templateType || 'AI Assisted', // Use the default if not provided
        importedFile: projectData.importedFile || null,
      });

      toast({
        title: "Project Created",
        description: `New project "${projectData.name}" has been created`,
      });
    } catch (err) {
      toast({
        title: "Error",
        description: "Failed to create project",
        variant: "destructive",
      });
    }

    setCreateDialogOpen(false);
  };

  // Handle exporting projects
  const handleExportProjects = () => {
    toast({
      title: "Export Projects",
      description: "Projects would be exported as CSV",
    });
  };

  // Handle status filter changes with all possible statuses
  const handleStatusFilterChange = (status: string) => {
    if (status === 'All') {
      setStatusFilter('All');
    } else if (
      status === 'Not Started' ||
      status === 'Started' ||
      status === 'In Progress' ||
      status === 'On Hold' ||
      status === 'Completed'
    ) {
      setStatusFilter(status as ProjectStatus);
    } else if (status === 'My') {
      if (user && user.name) {
        clearFilters(); // Clear any existing filters
        setSearchTerm(user.name); // Dynamically set search term to the user's username
      } else {
        // Handle case where user is not logged in
        toast({
          title: "Error",
          description: "Unable to filter 'My Projects'. Please log in.",
          variant: "destructive",
        });
      }
    }
  };

  return {
    viewType,
    setViewType,
    createDialogOpen,
    setCreateDialogOpen,
    deleteDialogOpen,
    setDeleteDialogOpen,
    projectToDelete,
    editDialogOpen,
    setEditDialogOpen,
    projectToEdit,
    projects,
    allProjects,
    searchTerm,
    setSearchTerm,
    statusFilter,
    setStatusFilter,
    priorityFilter,
    setPriorityFilter,
    templateFilter,
    setTemplateFilter,
    clearFilters,
    hasActiveFilters,
    handleProjectClick,
    handleCreateProject,
    handleEditProject,
    handleUpdateProject,
    handleDeleteProject,
    confirmDeleteProject,
    handleProjectCreation,
    handleExportProjects,
    handleStatusFilterChange,
    isLoading,
    error,
  };
};