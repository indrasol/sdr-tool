name: Build and Deploy to Azure Web App

on:
  push:
    branches:
      - main

env:
  # Match your ACR name and Azure Web App name
  ACR_NAME: securetrack
  WEBAPP_NAME: securetrackv1
  RG_NAME: RG-EU-STB-PRD-01
  IMAGE_NAME: sdr_backend

permissions:
  contents: read
  id-token: write

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    steps:
      # 1) Checkout the repo
      - name: "Checkout GitHub repository"
        uses: actions/checkout@v4

      # 2) Login to Azure using the service principal
      - name: "Login to Azure"
        uses: azure/login@v2
        with:
          client-id: ${{ secrets.AZUREAPPSERVICE_CLIENTID }}
          tenant-id: ${{ secrets.AZUREAPPSERVICE_TENANTID }}
          subscription-id: ${{ secrets.AZUREAPPSERVICE_SUBSCRIPTIONID }}

      # 3) Setup buildx
      - uses: docker/setup-buildx-action@v2

      # 4) Log in to ACR
      - name: "Log in to ACR"
        run: |
          az acr login --name ${{ env.ACR_NAME }}

      - name: Fetch ACR loginServer
        id: acr
        run: |
          echo "LOGIN_SERVER=$(az acr show --name ${{ env.ACR_NAME }} \
                            --query loginServer --output tsv)" >> $GITHUB_ENV

      # 5) Build+push multi-arch (we only target amd64 here)
      - name: Build & push amd64 image
        run: |
          docker buildx build \
            --platform linux/amd64 \
            --push \
            --tag $LOGIN_SERVER/${{ env.IMAGE_NAME }}:latest \
            --tag $LOGIN_SERVER/${{ env.IMAGE_NAME }}:${{ github.sha }} \
            --file sdr_backend/Dockerfile \
            .

      # 6️⃣  (optional) sanity check – prove D2 is inside the image
      - name: Smoke-test D2 in container
        run: |
          docker run --rm $LOGIN_SERVER/${{ env.IMAGE_NAME }}:latest d2 --version

      # 6.5️⃣  (optional) sanity check – prove d2json tool works
      - name: Smoke-test d2json tool in container
        run: |
          docker run --rm $LOGIN_SERVER/${{ env.IMAGE_NAME }}:latest sh -c "echo 'app { client -> api; api -> db }' | d2json --layout none"

      # 6) Deploy the new image to Azure Web App
      - name: "Deploy to Azure Web App"
        uses: azure/webapps-deploy@v2
        with:
          app-name: ${{ env.WEBAPP_NAME }}
          # slot-name: production
          # images: ${{ env.ACR_NAME }}-dzc8a3deejhje7d4.azurecr.io/${{ env.IMAGE_NAME }}:latest
          images: ${{ env.LOGIN_SERVER }}/${{ env.IMAGE_NAME }}:latest
