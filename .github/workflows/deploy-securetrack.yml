name: Build & Deploy – securetrack1

on:
  push:
    branches: [ main ]
  workflow_dispatch:

permissions:
  contents: read
  id-token: write

env:
  APP_NAME: securetrack1
  RESOURCE_GROUP: RG-EU-STB-PRD-01
  PYTHON_VERSION: "3.11"
  PACKAGE_PATH: site.zip
  APP_URL: https://securetrack1-h7hqejg8gjegfthn.eastus-01.azurewebsites.net

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      # 1. Checkout code
      - uses: actions/checkout@v4

      # 2. Set up Python
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          
      # 3. Prepare deployment package
      - name: Prepare deployment folder
        run: |
          # clean work dir
          rm -rf deploy && mkdir -p deploy
      
          # ⇢ 1. copy ONLY the inner contents of sdr_backend to deploy root
          rsync -av --exclude='__pycache__' --exclude='*.pyc' sdr_backend/ deploy/
      
          # ⇢ 2. (optional) copy dot‑files if you need them
          shopt -s dotglob
          cp -r sdr_backend/.* deploy/ || true
          shopt -u dotglob
      
          # ⇢ 3. vendor dependencies into the same directory
          python -m pip install --upgrade pip
          python -m pip install --no-cache-dir -r requirements.txt -t deploy
      
          # ⇢ 4. zip it up
          cd deploy
          zip -r ../site.zip . -x "*.git*" "*__pycache__*" "*.pyc"
          cd ..
      
      # 4. Upload artifact
      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: build-output
          path: ${{ env.PACKAGE_PATH }}

  deploy:
    needs: build
    runs-on: ubuntu-latest
    # Prevent concurrent deployments
    concurrency:
      group: deploy-${{ github.ref }}
      cancel-in-progress: false  # Changed from true to avoid interrupting deployments
    
    steps:
      - uses: actions/download-artifact@v4
        with:
          name: build-output

      # Login with OIDC
      - uses: azure/login@v2
        with:
          client-id: ${{ secrets.AZUREAPPSERVICE_CLIENTID }}
          tenant-id: ${{ secrets.AZUREAPPSERVICE_TENANTID }}
          subscription-id: ${{ secrets.AZUREAPPSERVICE_SUBSCRIPTIONID }}

      # Deploy the package
      - name: Deploy to App Service
        uses: azure/webapps-deploy@v3
        with:
          app-name: ${{ env.APP_NAME }}
          package: ${{ env.PACKAGE_PATH }}
          clean: true
          # Remove startup-command from here - set it in App Service configuration instead
        timeout-minutes: 40

      # Verify deployment
      - name: Verify app is up
        run: |
          for i in {1..10}; do
            echo "Attempt $i/10..."
            if curl -fsSL "${{ env.APP_URL }}/docs" -o /dev/null; then
              echo "App is running successfully!"
              exit 0
            fi
            echo "Waiting for app to respond..."
            sleep 30
          done
          echo "App did not start within timeout!" && exit 1
