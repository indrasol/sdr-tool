name: Build & Deploy – securetrackv1

on:
  push:
    branches: [ main ]
  workflow_dispatch:

permissions:
  contents: read
  id-token: write

env:
  APP_NAME: securetrackv1
  RESOURCE_GROUP: RG-EU-STB-PRD-01
  PYTHON_VERSION: "3.11"
  PACKAGE_PATH: site.zip
  APP_URL: https://securetrackv1-gtavbeb3e3d7ctf0.eastus-01.azurewebsites.net

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      # 1. Checkout code
      - uses: actions/checkout@v4

      # ─── BUILD (local) ───────────────────────────────────────────────────────────
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          
      # - name: Zip source (exclude big / dev stuff)
      #   run: |
      #     zip -r ${{ env.PACKAGE_PATH }} \
      #         sdr_backend requirements.txt \
      #         -x "*/__pycache__/*" "tests/**" "uploads/**" \
      #            "outputs/**" "*.pyc" ".git/**"
  
      - name: Prepare deployment folder
        run: |
          # 1.  make a clean folder for everything that must go to the server
          mkdir deploy
      
          # 2.  copy your source package exactly as-is
          cp -r sdr_backend deploy/
      
          # 3.  vendor all dependencies **into the deploy root**
          pip install --upgrade pip
          pip install --no-cache-dir -r sdr_backend/requirements.txt -t deploy/sdr_backend
      
          # 4.  create the zip from inside deploy/
          cd deploy
          zip -r ../site.zip sdr_backend
  
      - name: Upload artifact (for troubleshooting)
        uses: actions/upload-artifact@v4
        with:
          name: build-output
          path: ${{ env.PACKAGE_PATH }}

      # 2. (Optional) lint / unit‑test here …

      # 3. Zip ONLY source + requirements
      # - name: Create deployment bundle
      #   run: |
      #     zip -r site.zip sdr_backend requirements.txt \
      #         -x "**/__pycache__/*" ".git/*"

      # - uses: actions/upload-artifact@v4
      #   with:
      #     name: build-output
      #     path: site.zip

  deploy:
    needs: build
    runs-on: ubuntu-latest
    concurrency:
      group: deploy-${{ github.ref }}
      cancel-in-progress: true
    steps:
      - uses: actions/download-artifact@v4
        with:
          name: build-output

      # Login with OIDC
      - uses: azure/login@v2
        with:
          client-id:  ${{ secrets.AZUREAPPSERVICE_CLIENTID }}
          tenant-id:  ${{ secrets.AZUREAPPSERVICE_TENANTID }}
          subscription-id: ${{ secrets.AZUREAPPSERVICE_SUBSCRIPTIONID }}

      # ─── 3️⃣ Deploy package ────────────────────────────
      - name: Deploy to App Service
        uses: azure/webapps-deploy@v3
        with:
          app-name:          ${{ env.APP_NAME }}
          package:           ${{ env.PACKAGE_PATH }}
          clean:             true               # wipes wwwroot first
          # startup-command: |
            # gunicorn --workers 2 --worker-class uvicorn.workers.UvicornWorker \
            #          --bind 0.0.0.0:$PORT sdr_backend.main:app
        timeout-minutes: 30

      # ─── 4️⃣ Restart & smoke‑test ──────────────────────
      # - name: Start App Service
      #   run: |
      #     az webapp start \
      #       --name ${{ env.APP_NAME }} \
      #       --resource-group ${{ env.RESOURCE_GROUP }}
            
      # ❸ Smoke test
      - name: Verify app is up
        run: |
          for i in {1..5}; do
            curl -fsSL "${{ env.APP_URL }}" && exit 0
            echo "Waiting for app… ($i/5)"; sleep 30
          done
          echo "App did not start!" && exit 1

