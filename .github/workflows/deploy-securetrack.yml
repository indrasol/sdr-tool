name: Build & Deploy â€“ securetrack1

on:
  push:
    branches: [ main ]
  workflow_dispatch:

permissions:
  contents: read
  id-token: write

env:
  APP_NAME: securetrack1
  RESOURCE_GROUP: RG-EU-STB-PRD-01
  PYTHON_VERSION: "3.11"
  PACKAGE_PATH: site.zip
  APP_URL: https://securetrack1-h7hqejg8gjegfthn.eastus-01.azurewebsites.net

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      # 1. Checkout code
      - uses: actions/checkout@v4

      # 2. Set up Python
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          
      # 3. Prepare deployment package
      - name: Prepare deployment folder
        run: |
          # Create a clean deployment directory
          mkdir -p deploy
          
          # Copy your application code
          cp -r sdr_backend deploy/
          
          # Create requirements.txt in the root of deployment
          cp sdr_backend/requirements.txt deploy/
          
          # For Linux App Service, we don't vendor dependencies
          # They will be installed by Oryx build system
          
          # Create the deployment package
          cd deploy
          zip -r ../site.zip . -x "*.git*" "*__pycache__*" "*.pyc"
          cd ..
          
          # Log package contents for debugging
          echo "Package contents:"
          unzip -l site.zip | head -20

      # 4. Upload artifact
      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: build-output
          path: ${{ env.PACKAGE_PATH }}

  deploy:
    needs: build
    runs-on: ubuntu-latest
    # Prevent concurrent deployments
    concurrency:
      group: deploy-${{ github.ref }}
      cancel-in-progress: false  # Changed from true to avoid interrupting deployments
    
    steps:
      - uses: actions/download-artifact@v4
        with:
          name: build-output

      # Login with OIDC
      - uses: azure/login@v2
        with:
          client-id: ${{ secrets.AZUREAPPSERVICE_CLIENTID }}
          tenant-id: ${{ secrets.AZUREAPPSERVICE_TENANTID }}
          subscription-id: ${{ secrets.AZUREAPPSERVICE_SUBSCRIPTIONID }}

      # Stop the app before deployment to avoid file locks
      # - name: Stop App Service
      #   run: |
      #     az webapp stop \
      #       --name ${{ env.APP_NAME }} \
      #       --resource-group ${{ env.RESOURCE_GROUP }}
      #   continue-on-error: true

      # # Wait for app to fully stop
      # - name: Wait for app to stop
      #   run: sleep 30

      # Clean up existing deployment
      # - name: Clean deployment slot
      #   run: |
      #     az webapp deployment clean \
      #       --name ${{ env.APP_NAME }} \
      #       --resource-group ${{ env.RESOURCE_GROUP }} \
      #       --target-status 'Failed' || true
      #   continue-on-error: true

      # Deploy the package
      - name: Deploy to App Service
        run: |
            # Use Azure CLI deployment which handles conflicts better
            az webapp deployment source config-zip \
              --name ${{ env.APP_NAME }} \
              --resource-group ${{ env.RESOURCE_GROUP }} \
              --src ${{ env.PACKAGE_PATH }} \
              --timeout 3600
            timeout-minutes: 30
        # uses: azure/webapps-deploy@v3
        # with:
        #   app-name: ${{ env.APP_NAME }}
        #   package: ${{ env.PACKAGE_PATH }}
        #   clean: true
        #   # Remove startup-command from here - set it in App Service configuration instead
        # timeout-minutes: 30

      # Configure startup command separately
      - name: Configure App Service
        run: |
          az webapp config set \
            --name ${{ env.APP_NAME }} \
            --resource-group ${{ env.RESOURCE_GROUP }} \
            --startup-file "gunicorn --workers 2 --worker-class uvicorn.workers.UvicornWorker --bind 0.0.0.0:8000 --timeout 600 sdr_backend.main:app"

      # Start the app
      # - name: Start App Service
      #   run: |
      #     az webapp start \
      #       --name ${{ env.APP_NAME }} \
      #       --resource-group ${{ env.RESOURCE_GROUP }}

      # Wait for app to start
      # - name: Wait for app startup
      #   run: sleep 60

      # Verify deployment
      - name: Verify app is up
        run: |
          for i in {1..10}; do
            echo "Attempt $i/10..."
            if curl -fsSL "${{ env.APP_URL }}/docs" -o /dev/null; then
              echo "App is running successfully!"
              exit 0
            fi
            echo "Waiting for app to respond..."
            sleep 30
          done
          echo "App did not start within timeout!" && exit 1
