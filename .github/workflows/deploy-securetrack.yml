name: Build & Deploy – securetrack

on:
  push:
    branches: [ main ]
  workflow_dispatch:

permissions:
  contents: read
  id-token: write     # for azure/login OIDC

env:
  APP_NAME: securetrack
  PYTHON_VERSION: '3.11'
  RESOURCE_GROUP: RG-EU-STB-PRD-01
  APP_URL: https://securetrack-fwcjcdffbug2g9fc.eastus-01.azurewebsites.net

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout
      uses: actions/checkout@v4

    # ─── BUILD (local) ───────────────────────────────────────────────────────────
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Prepare deployment folder
      run: |
        # 1.  make a clean folder for everything that must go to the server
        mkdir deploy
    
        # 2.  copy your source package exactly as-is
        cp -r sdr_backend deploy/
    
        # 3.  vendor all dependencies **into the deploy root**
        pip install --upgrade pip
        pip install --no-cache-dir -r sdr_backend/requirements.txt -t deploy
    
        # 4.  create the zip from inside deploy/
        cd deploy
        zip -r ../site.zip .

    - name: Upload artifact (for troubleshooting)
      uses: actions/upload-artifact@v4
      with:
        name: build-output
        path: site.zip

    # ─── DEPLOY ─────────────────────────────────────────────────────────────────
    - name: Azure login (OIDC)
      uses: azure/login@v2
      with:
        client-id: ${{ secrets.AZUREAPPSERVICE_CLIENTID }}
        tenant-id: ${{ secrets.AZUREAPPSERVICE_TENANTID }}
        subscription-id: ${{ secrets.AZUREAPPSERVICE_SUBSCRIPTIONID }}

    - name: Check and clear existing deployments
      run: |
        echo "Checking for existing deployments..."
        
        # Get current deployment status
        DEPLOYMENT_STATUS=$(az webapp deployment list \
          --name ${{ env.APP_NAME }} \
          --resource-group ${{ env.RESOURCE_GROUP }} \
          --query "[0].status" -o tsv 2>/dev/null || echo "none")
        
        echo "Current deployment status: $DEPLOYMENT_STATUS"
        
        # If there's an active deployment, try to stop it
        if [ "$DEPLOYMENT_STATUS" = "Running" ] || [ "$DEPLOYMENT_STATUS" = "Building" ]; then
          echo "Found active deployment, attempting to stop..."
          
          # Method 1: Restart the app service to clear locks
          echo "Restarting app service..."
          az webapp restart \
            --name ${{ env.APP_NAME }} \
            --resource-group ${{ env.RESOURCE_GROUP }}
          
          # Wait a bit for restart to complete
          sleep 30
          
          echo "App service restarted. Proceeding with deployment..."
        else
          echo "No active deployment found. Proceeding..."
        fi
        
    # FIX: Remove the blocking app setting
    - name: Remove WEBSITE_RUN_FROM_PACKAGE setting
      run: |
        echo "Removing WEBSITE_RUN_FROM_PACKAGE setting..."
        az webapp config appsettings delete \
          --name ${{ env.APP_NAME }} \
          --resource-group ${{ env.RESOURCE_GROUP }} \
          --setting-names WEBSITE_RUN_FROM_PACKAGE || true
        
        echo "Restarting app to clear any deployment locks..."
        az webapp restart \
          --name ${{ env.APP_NAME }} \
          --resource-group ${{ env.RESOURCE_GROUP }}
        
        sleep 30

    # FIX: Use the new non-deprecated command
    - name: Deploy to Web App
      uses: nick-invision/retry@v2
      with:
        timeout_minutes: 20
        max_attempts: 3
        retry_wait_seconds: 60
        command: |
          az webapp deploy \
            --name ${{ env.APP_NAME }} \
            --resource-group ${{ env.RESOURCE_GROUP }} \
            --src-path site.zip \
            --type zip \
            --timeout 600

    # FALLBACK: If retry fails, use alternative deployment method
    - name: Fallback Deploy (if needed)
      if: failure()
      run: |
        echo "Primary deployment failed, trying alternative method..."
        
        # Stop the app first
        az webapp stop --name ${{ env.APP_NAME }} --resource-group ${{ env.RESOURCE_GROUP }}
        sleep 10
        
        # Deploy using FTP method
        az webapp deployment source config-zip \
          --name ${{ env.APP_NAME }} \
          --resource-group ${{ env.RESOURCE_GROUP }} \
          --src site.zip \
          --timeout 900
        
        # Start the app
        az webapp start --name ${{ env.APP_NAME }} --resource-group ${{ env.RESOURCE_GROUP }}

    - name: Verify Deployment
      run: |
        echo "Waiting for app to start..."
        sleep 30
        
        # Check if the app is responding
        APP_URL=${{ env.APP_URL }}
        
        for i in {1..5}; do
          if curl -f -s "$APP_URL" > /dev/null; then
            echo "✅ App is responding successfully!"
            break
          else
            echo "⏳ Attempt $i: App not responding yet, waiting..."
            sleep 30
          fi
        done
